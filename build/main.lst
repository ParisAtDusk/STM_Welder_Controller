ARM GAS  /tmp/ccw28lnx.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB229:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include "welder.h"
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
ARM GAS  /tmp/ccw28lnx.s 			page 2


  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PM */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  44:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  49:Core/Src/main.c **** TIM_HandleTypeDef htim4;
  50:Core/Src/main.c **** TIM_HandleTypeDef htim10;
  51:Core/Src/main.c **** TIM_HandleTypeDef htim11;
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* USER CODE BEGIN PV */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* USER CODE END PV */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  58:Core/Src/main.c **** void SystemClock_Config(void);
  59:Core/Src/main.c **** static void MX_GPIO_Init(void);
  60:Core/Src/main.c **** static void MX_DMA_Init(void);
  61:Core/Src/main.c **** static void MX_TIM4_Init(void);
  62:Core/Src/main.c **** static void MX_I2C1_Init(void);
  63:Core/Src/main.c **** static void MX_ADC1_Init(void);
  64:Core/Src/main.c **** static void MX_TIM2_Init(void);
  65:Core/Src/main.c **** static void MX_TIM10_Init(void);
  66:Core/Src/main.c **** static void MX_TIM11_Init(void);
  67:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /* USER CODE END PFP */
  70:Core/Src/main.c **** 
  71:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  72:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** /* USER CODE END 0 */
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** /**
  77:Core/Src/main.c ****   * @brief  The application entry point.
  78:Core/Src/main.c ****   * @retval int
  79:Core/Src/main.c ****   */
  80:Core/Src/main.c **** int main(void)
  81:Core/Src/main.c **** {
  82:Core/Src/main.c **** 
  83:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  84:Core/Src/main.c **** 
  85:Core/Src/main.c ****   /* USER CODE END 1 */
  86:Core/Src/main.c **** 
  87:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  88:Core/Src/main.c **** 
ARM GAS  /tmp/ccw28lnx.s 			page 3


  89:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  90:Core/Src/main.c ****   HAL_Init();
  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* USER CODE END Init */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****   /* Configure the system clock */
  97:Core/Src/main.c ****   SystemClock_Config();
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 100:Core/Src/main.c **** 
 101:Core/Src/main.c ****   /* USER CODE END SysInit */
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****   /* Initialize all configured peripherals */
 104:Core/Src/main.c ****   MX_GPIO_Init();
 105:Core/Src/main.c ****   MX_DMA_Init();
 106:Core/Src/main.c ****   MX_TIM4_Init();
 107:Core/Src/main.c ****   MX_I2C1_Init();
 108:Core/Src/main.c ****   MX_ADC1_Init();
 109:Core/Src/main.c ****   MX_TIM2_Init();
 110:Core/Src/main.c ****   MX_TIM10_Init();
 111:Core/Src/main.c ****   MX_TIM11_Init();
 112:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 113:Core/Src/main.c ****   
 114:Core/Src/main.c ****   // HAL_Delay(3000);
 115:Core/Src/main.c ****   // HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_4);
 116:Core/Src/main.c ****   // __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 200);
 117:Core/Src/main.c ****   // HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 118:Core/Src/main.c ****   
 119:Core/Src/main.c ****     // HAL_TIM_Base_Start_IT(&htim11);
 120:Core/Src/main.c ****   /* USER CODE END 2 */
 121:Core/Src/main.c **** 
 122:Core/Src/main.c ****   /* Infinite loop */
 123:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 124:Core/Src/main.c ****   // welder(&htim2, &htim4, &htim10, &hi2c1, &hspi1, &hadc1);
 125:Core/Src/main.c ****   welder();
 126:Core/Src/main.c ****   while (1)
 127:Core/Src/main.c ****   {
 128:Core/Src/main.c ****     /* USER CODE END WHILE */
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 131:Core/Src/main.c ****   }
 132:Core/Src/main.c ****   /* USER CODE END 3 */
 133:Core/Src/main.c **** }
 134:Core/Src/main.c **** 
 135:Core/Src/main.c **** /**
 136:Core/Src/main.c ****   * @brief System Clock Configuration
 137:Core/Src/main.c ****   * @retval None
 138:Core/Src/main.c ****   */
 139:Core/Src/main.c **** void SystemClock_Config(void)
 140:Core/Src/main.c **** {
 141:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 142:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 143:Core/Src/main.c **** 
 144:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 145:Core/Src/main.c ****   */
ARM GAS  /tmp/ccw28lnx.s 			page 4


 146:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 147:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 148:Core/Src/main.c **** 
 149:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 150:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 151:Core/Src/main.c ****   */
 152:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 153:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 154:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 155:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 156:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 25;
 157:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 160;
 158:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 159:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 160:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 161:Core/Src/main.c ****   {
 162:Core/Src/main.c ****     Error_Handler();
 163:Core/Src/main.c ****   }
 164:Core/Src/main.c **** 
 165:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 166:Core/Src/main.c ****   */
 167:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 168:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 169:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 170:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 171:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 172:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 173:Core/Src/main.c **** 
 174:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 175:Core/Src/main.c ****   {
 176:Core/Src/main.c ****     Error_Handler();
 177:Core/Src/main.c ****   }
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****   /** Enables the Clock Security System
 180:Core/Src/main.c ****   */
 181:Core/Src/main.c ****   HAL_RCC_EnableCSS();
 182:Core/Src/main.c **** }
 183:Core/Src/main.c **** 
 184:Core/Src/main.c **** /**
 185:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 186:Core/Src/main.c ****   * @param None
 187:Core/Src/main.c ****   * @retval None
 188:Core/Src/main.c ****   */
 189:Core/Src/main.c **** static void MX_ADC1_Init(void)
 190:Core/Src/main.c **** {
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 193:Core/Src/main.c **** 
 194:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 197:Core/Src/main.c **** 
 198:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 201:Core/Src/main.c **** 
 202:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
ARM GAS  /tmp/ccw28lnx.s 			page 5


 203:Core/Src/main.c ****   */
 204:Core/Src/main.c ****   hadc1.Instance = ADC1;
 205:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 206:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 207:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 208:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 209:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 210:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 211:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 212:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 213:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 2;
 214:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 215:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 216:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 217:Core/Src/main.c ****   {
 218:Core/Src/main.c ****     Error_Handler();
 219:Core/Src/main.c ****   }
 220:Core/Src/main.c **** 
 221:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 222:Core/Src/main.c ****   */
 223:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
 224:Core/Src/main.c ****   sConfig.Rank = 1;
 225:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 226:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 227:Core/Src/main.c ****   {
 228:Core/Src/main.c ****     Error_Handler();
 229:Core/Src/main.c ****   }
 230:Core/Src/main.c **** 
 231:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 232:Core/Src/main.c ****   */
 233:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 234:Core/Src/main.c ****   sConfig.Rank = 2;
 235:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 236:Core/Src/main.c ****   {
 237:Core/Src/main.c ****     Error_Handler();
 238:Core/Src/main.c ****   }
 239:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 240:Core/Src/main.c **** 
 241:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 242:Core/Src/main.c **** 
 243:Core/Src/main.c **** }
 244:Core/Src/main.c **** 
 245:Core/Src/main.c **** /**
 246:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 247:Core/Src/main.c ****   * @param None
 248:Core/Src/main.c ****   * @retval None
 249:Core/Src/main.c ****   */
 250:Core/Src/main.c **** static void MX_I2C1_Init(void)
 251:Core/Src/main.c **** {
 252:Core/Src/main.c **** 
 253:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 254:Core/Src/main.c **** 
 255:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 256:Core/Src/main.c **** 
 257:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 258:Core/Src/main.c **** 
 259:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
ARM GAS  /tmp/ccw28lnx.s 			page 6


 260:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 261:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 262:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 263:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 264:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 265:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 266:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 267:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 268:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 269:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 270:Core/Src/main.c ****   {
 271:Core/Src/main.c ****     Error_Handler();
 272:Core/Src/main.c ****   }
 273:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 274:Core/Src/main.c **** 
 275:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 276:Core/Src/main.c **** 
 277:Core/Src/main.c **** }
 278:Core/Src/main.c **** 
 279:Core/Src/main.c **** /**
 280:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 281:Core/Src/main.c ****   * @param None
 282:Core/Src/main.c ****   * @retval None
 283:Core/Src/main.c ****   */
 284:Core/Src/main.c **** static void MX_TIM2_Init(void)
 285:Core/Src/main.c **** {
 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 288:Core/Src/main.c **** 
 289:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 290:Core/Src/main.c **** 
 291:Core/Src/main.c ****   TIM_Encoder_InitTypeDef sConfig = {0};
 292:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 293:Core/Src/main.c **** 
 294:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 295:Core/Src/main.c **** 
 296:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 297:Core/Src/main.c ****   htim2.Instance = TIM2;
 298:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
 299:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 300:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 301:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 302:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 303:Core/Src/main.c ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 304:Core/Src/main.c ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 305:Core/Src/main.c ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 306:Core/Src/main.c ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 307:Core/Src/main.c ****   sConfig.IC1Filter = 0;
 308:Core/Src/main.c ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 309:Core/Src/main.c ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 310:Core/Src/main.c ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 311:Core/Src/main.c ****   sConfig.IC2Filter = 0;
 312:Core/Src/main.c ****   if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 313:Core/Src/main.c ****   {
 314:Core/Src/main.c ****     Error_Handler();
 315:Core/Src/main.c ****   }
 316:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
ARM GAS  /tmp/ccw28lnx.s 			page 7


 317:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 318:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 319:Core/Src/main.c ****   {
 320:Core/Src/main.c ****     Error_Handler();
 321:Core/Src/main.c ****   }
 322:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 323:Core/Src/main.c **** 
 324:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 325:Core/Src/main.c **** 
 326:Core/Src/main.c **** }
 327:Core/Src/main.c **** 
 328:Core/Src/main.c **** /**
 329:Core/Src/main.c ****   * @brief TIM4 Initialization Function
 330:Core/Src/main.c ****   * @param None
 331:Core/Src/main.c ****   * @retval None
 332:Core/Src/main.c ****   */
 333:Core/Src/main.c **** static void MX_TIM4_Init(void)
 334:Core/Src/main.c **** {
 335:Core/Src/main.c **** 
 336:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 0 */
 337:Core/Src/main.c **** 
 338:Core/Src/main.c ****   /* USER CODE END TIM4_Init 0 */
 339:Core/Src/main.c **** 
 340:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 341:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 342:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 343:Core/Src/main.c **** 
 344:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 1 */
 345:Core/Src/main.c **** 
 346:Core/Src/main.c ****   /* USER CODE END TIM4_Init 1 */
 347:Core/Src/main.c ****   htim4.Instance = TIM4;
 348:Core/Src/main.c ****   htim4.Init.Prescaler = 160-1;
 349:Core/Src/main.c ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 350:Core/Src/main.c ****   htim4.Init.Period = 999;
 351:Core/Src/main.c ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 352:Core/Src/main.c ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 353:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 354:Core/Src/main.c ****   {
 355:Core/Src/main.c ****     Error_Handler();
 356:Core/Src/main.c ****   }
 357:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 358:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 359:Core/Src/main.c ****   {
 360:Core/Src/main.c ****     Error_Handler();
 361:Core/Src/main.c ****   }
 362:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 363:Core/Src/main.c ****   {
 364:Core/Src/main.c ****     Error_Handler();
 365:Core/Src/main.c ****   }
 366:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 367:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 368:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 369:Core/Src/main.c ****   {
 370:Core/Src/main.c ****     Error_Handler();
 371:Core/Src/main.c ****   }
 372:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 373:Core/Src/main.c ****   sConfigOC.Pulse = 0;
ARM GAS  /tmp/ccw28lnx.s 			page 8


 374:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 375:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 376:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 377:Core/Src/main.c ****   {
 378:Core/Src/main.c ****     Error_Handler();
 379:Core/Src/main.c ****   }
 380:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 2 */
 381:Core/Src/main.c **** 
 382:Core/Src/main.c ****   /* USER CODE END TIM4_Init 2 */
 383:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim4);
 384:Core/Src/main.c **** 
 385:Core/Src/main.c **** }
 386:Core/Src/main.c **** 
 387:Core/Src/main.c **** /**
 388:Core/Src/main.c ****   * @brief TIM10 Initialization Function
 389:Core/Src/main.c ****   * @param None
 390:Core/Src/main.c ****   * @retval None
 391:Core/Src/main.c ****   */
 392:Core/Src/main.c **** static void MX_TIM10_Init(void)
 393:Core/Src/main.c **** {
 394:Core/Src/main.c **** 
 395:Core/Src/main.c ****   /* USER CODE BEGIN TIM10_Init 0 */
 396:Core/Src/main.c **** 
 397:Core/Src/main.c ****   /* USER CODE END TIM10_Init 0 */
 398:Core/Src/main.c **** 
 399:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 400:Core/Src/main.c **** 
 401:Core/Src/main.c ****   /* USER CODE BEGIN TIM10_Init 1 */
 402:Core/Src/main.c **** 
 403:Core/Src/main.c ****   /* USER CODE END TIM10_Init 1 */
 404:Core/Src/main.c ****   htim10.Instance = TIM10;
 405:Core/Src/main.c ****   htim10.Init.Prescaler = 0;
 406:Core/Src/main.c ****   htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 407:Core/Src/main.c ****   htim10.Init.Period = 65535;
 408:Core/Src/main.c ****   htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 409:Core/Src/main.c ****   htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 410:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 411:Core/Src/main.c ****   {
 412:Core/Src/main.c ****     Error_Handler();
 413:Core/Src/main.c ****   }
 414:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 415:Core/Src/main.c ****   {
 416:Core/Src/main.c ****     Error_Handler();
 417:Core/Src/main.c ****   }
 418:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 419:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 420:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 421:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 422:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 423:Core/Src/main.c ****   {
 424:Core/Src/main.c ****     Error_Handler();
 425:Core/Src/main.c ****   }
 426:Core/Src/main.c ****   /* USER CODE BEGIN TIM10_Init 2 */
 427:Core/Src/main.c **** 
 428:Core/Src/main.c ****   /* USER CODE END TIM10_Init 2 */
 429:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim10);
 430:Core/Src/main.c **** 
ARM GAS  /tmp/ccw28lnx.s 			page 9


 431:Core/Src/main.c **** }
 432:Core/Src/main.c **** 
 433:Core/Src/main.c **** /**
 434:Core/Src/main.c ****   * @brief TIM11 Initialization Function
 435:Core/Src/main.c ****   * @param None
 436:Core/Src/main.c ****   * @retval None
 437:Core/Src/main.c ****   */
 438:Core/Src/main.c **** static void MX_TIM11_Init(void)
 439:Core/Src/main.c **** {
 440:Core/Src/main.c **** 
 441:Core/Src/main.c ****   /* USER CODE BEGIN TIM11_Init 0 */
 442:Core/Src/main.c **** 
 443:Core/Src/main.c ****   /* USER CODE END TIM11_Init 0 */
 444:Core/Src/main.c **** 
 445:Core/Src/main.c ****   /* USER CODE BEGIN TIM11_Init 1 */
 446:Core/Src/main.c **** 
 447:Core/Src/main.c ****   /* USER CODE END TIM11_Init 1 */
 448:Core/Src/main.c ****   htim11.Instance = TIM11;
 449:Core/Src/main.c ****   htim11.Init.Prescaler = 32-1;
 450:Core/Src/main.c ****   htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 451:Core/Src/main.c ****   htim11.Init.Period = 65535;
 452:Core/Src/main.c ****   htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 453:Core/Src/main.c ****   htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 454:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 455:Core/Src/main.c ****   {
 456:Core/Src/main.c ****     Error_Handler();
 457:Core/Src/main.c ****   }
 458:Core/Src/main.c ****   /* USER CODE BEGIN TIM11_Init 2 */
 459:Core/Src/main.c **** 
 460:Core/Src/main.c ****   /* USER CODE END TIM11_Init 2 */
 461:Core/Src/main.c **** 
 462:Core/Src/main.c **** }
 463:Core/Src/main.c **** 
 464:Core/Src/main.c **** /**
 465:Core/Src/main.c ****   * Enable DMA controller clock
 466:Core/Src/main.c ****   */
 467:Core/Src/main.c **** static void MX_DMA_Init(void)
 468:Core/Src/main.c **** {
 469:Core/Src/main.c **** 
 470:Core/Src/main.c ****   /* DMA controller clock enable */
 471:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 472:Core/Src/main.c **** 
 473:Core/Src/main.c ****   /* DMA interrupt init */
 474:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 475:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 476:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 477:Core/Src/main.c **** 
 478:Core/Src/main.c **** }
 479:Core/Src/main.c **** 
 480:Core/Src/main.c **** /**
 481:Core/Src/main.c ****   * @brief GPIO Initialization Function
 482:Core/Src/main.c ****   * @param None
 483:Core/Src/main.c ****   * @retval None
 484:Core/Src/main.c ****   */
 485:Core/Src/main.c **** static void MX_GPIO_Init(void)
 486:Core/Src/main.c **** {
  28              		.loc 1 486 1 view -0
ARM GAS  /tmp/ccw28lnx.s 			page 10


  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  33              		.cfi_def_cfa_offset 20
  34              		.cfi_offset 4, -20
  35              		.cfi_offset 5, -16
  36              		.cfi_offset 6, -12
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 8BB0     		sub	sp, sp, #44
  40              		.cfi_def_cfa_offset 64
 487:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 487 3 view .LVU1
  42              		.loc 1 487 20 is_stmt 0 view .LVU2
  43 0004 05AD     		add	r5, sp, #20
  44 0006 0024     		movs	r4, #0
  45 0008 0594     		str	r4, [sp, #20]
  46 000a 0694     		str	r4, [sp, #24]
  47 000c 0794     		str	r4, [sp, #28]
  48 000e 0894     		str	r4, [sp, #32]
  49 0010 0994     		str	r4, [sp, #36]
 488:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 489:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 490:Core/Src/main.c **** 
 491:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 492:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  50              		.loc 1 492 3 is_stmt 1 view .LVU3
  51              	.LBB4:
  52              		.loc 1 492 3 view .LVU4
  53 0012 0194     		str	r4, [sp, #4]
  54              		.loc 1 492 3 view .LVU5
  55 0014 2A4B     		ldr	r3, .L3
  56 0016 1A6B     		ldr	r2, [r3, #48]
  57 0018 42F00402 		orr	r2, r2, #4
  58 001c 1A63     		str	r2, [r3, #48]
  59              		.loc 1 492 3 view .LVU6
  60 001e 1A6B     		ldr	r2, [r3, #48]
  61 0020 02F00402 		and	r2, r2, #4
  62 0024 0192     		str	r2, [sp, #4]
  63              		.loc 1 492 3 view .LVU7
  64 0026 019A     		ldr	r2, [sp, #4]
  65              	.LBE4:
  66              		.loc 1 492 3 view .LVU8
 493:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  67              		.loc 1 493 3 view .LVU9
  68              	.LBB5:
  69              		.loc 1 493 3 view .LVU10
  70 0028 0294     		str	r4, [sp, #8]
  71              		.loc 1 493 3 view .LVU11
  72 002a 1A6B     		ldr	r2, [r3, #48]
  73 002c 42F08002 		orr	r2, r2, #128
  74 0030 1A63     		str	r2, [r3, #48]
  75              		.loc 1 493 3 view .LVU12
  76 0032 1A6B     		ldr	r2, [r3, #48]
  77 0034 02F08002 		and	r2, r2, #128
  78 0038 0292     		str	r2, [sp, #8]
ARM GAS  /tmp/ccw28lnx.s 			page 11


  79              		.loc 1 493 3 view .LVU13
  80 003a 029A     		ldr	r2, [sp, #8]
  81              	.LBE5:
  82              		.loc 1 493 3 view .LVU14
 494:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  83              		.loc 1 494 3 view .LVU15
  84              	.LBB6:
  85              		.loc 1 494 3 view .LVU16
  86 003c 0394     		str	r4, [sp, #12]
  87              		.loc 1 494 3 view .LVU17
  88 003e 1A6B     		ldr	r2, [r3, #48]
  89 0040 42F00102 		orr	r2, r2, #1
  90 0044 1A63     		str	r2, [r3, #48]
  91              		.loc 1 494 3 view .LVU18
  92 0046 1A6B     		ldr	r2, [r3, #48]
  93 0048 02F00102 		and	r2, r2, #1
  94 004c 0392     		str	r2, [sp, #12]
  95              		.loc 1 494 3 view .LVU19
  96 004e 039A     		ldr	r2, [sp, #12]
  97              	.LBE6:
  98              		.loc 1 494 3 view .LVU20
 495:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  99              		.loc 1 495 3 view .LVU21
 100              	.LBB7:
 101              		.loc 1 495 3 view .LVU22
 102 0050 0494     		str	r4, [sp, #16]
 103              		.loc 1 495 3 view .LVU23
 104 0052 1A6B     		ldr	r2, [r3, #48]
 105 0054 42F00202 		orr	r2, r2, #2
 106 0058 1A63     		str	r2, [r3, #48]
 107              		.loc 1 495 3 view .LVU24
 108 005a 1B6B     		ldr	r3, [r3, #48]
 109 005c 03F00203 		and	r3, r3, #2
 110 0060 0493     		str	r3, [sp, #16]
 111              		.loc 1 495 3 view .LVU25
 112 0062 049B     		ldr	r3, [sp, #16]
 113              	.LBE7:
 114              		.loc 1 495 3 view .LVU26
 496:Core/Src/main.c **** 
 497:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 498:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, GAS_Pin|IGNITION_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 115              		.loc 1 498 3 view .LVU27
 116 0064 174F     		ldr	r7, .L3+4
 117 0066 2246     		mov	r2, r4
 118 0068 4FF46041 		mov	r1, #57344
 119 006c 3846     		mov	r0, r7
 120 006e FFF7FEFF 		bl	HAL_GPIO_WritePin
 121              	.LVL0:
 499:Core/Src/main.c **** 
 500:Core/Src/main.c ****   /*Configure GPIO pins : GAS_Pin IGNITION_Pin BUZZER_Pin */
 501:Core/Src/main.c ****   GPIO_InitStruct.Pin = GAS_Pin|IGNITION_Pin|BUZZER_Pin;
 122              		.loc 1 501 3 view .LVU28
 123              		.loc 1 501 23 is_stmt 0 view .LVU29
 124 0072 4FF46043 		mov	r3, #57344
 125 0076 0593     		str	r3, [sp, #20]
 502:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 126              		.loc 1 502 3 is_stmt 1 view .LVU30
ARM GAS  /tmp/ccw28lnx.s 			page 12


 127              		.loc 1 502 24 is_stmt 0 view .LVU31
 128 0078 0126     		movs	r6, #1
 129 007a 0696     		str	r6, [sp, #24]
 503:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 130              		.loc 1 503 3 is_stmt 1 view .LVU32
 131              		.loc 1 503 24 is_stmt 0 view .LVU33
 132 007c 0794     		str	r4, [sp, #28]
 504:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 133              		.loc 1 504 3 is_stmt 1 view .LVU34
 134              		.loc 1 504 25 is_stmt 0 view .LVU35
 135 007e 0894     		str	r4, [sp, #32]
 505:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 136              		.loc 1 505 3 is_stmt 1 view .LVU36
 137 0080 2946     		mov	r1, r5
 138 0082 3846     		mov	r0, r7
 139 0084 FFF7FEFF 		bl	HAL_GPIO_Init
 140              	.LVL1:
 506:Core/Src/main.c **** 
 507:Core/Src/main.c ****   /*Configure GPIO pins : ENC_BUTTON_Pin TORCH_BUTTON_Pin */
 508:Core/Src/main.c ****   GPIO_InitStruct.Pin = ENC_BUTTON_Pin|TORCH_BUTTON_Pin;
 141              		.loc 1 508 3 view .LVU37
 142              		.loc 1 508 23 is_stmt 0 view .LVU38
 143 0088 3023     		movs	r3, #48
 144 008a 0593     		str	r3, [sp, #20]
 509:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 145              		.loc 1 509 3 is_stmt 1 view .LVU39
 146              		.loc 1 509 24 is_stmt 0 view .LVU40
 147 008c 4FF40413 		mov	r3, #2162688
 148 0090 0693     		str	r3, [sp, #24]
 510:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 149              		.loc 1 510 3 is_stmt 1 view .LVU41
 150              		.loc 1 510 24 is_stmt 0 view .LVU42
 151 0092 0796     		str	r6, [sp, #28]
 511:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 152              		.loc 1 511 3 is_stmt 1 view .LVU43
 153 0094 2946     		mov	r1, r5
 154 0096 0C48     		ldr	r0, .L3+8
 155 0098 FFF7FEFF 		bl	HAL_GPIO_Init
 156              	.LVL2:
 512:Core/Src/main.c **** 
 513:Core/Src/main.c ****   /* EXTI interrupt init*/
 514:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 157              		.loc 1 514 3 view .LVU44
 158 009c 2246     		mov	r2, r4
 159 009e 3146     		mov	r1, r6
 160 00a0 0A20     		movs	r0, #10
 161 00a2 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 162              	.LVL3:
 515:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 163              		.loc 1 515 3 view .LVU45
 164 00a6 0A20     		movs	r0, #10
 165 00a8 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 166              	.LVL4:
 516:Core/Src/main.c **** 
 517:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 167              		.loc 1 517 3 view .LVU46
 168 00ac 2246     		mov	r2, r4
ARM GAS  /tmp/ccw28lnx.s 			page 13


 169 00ae 3146     		mov	r1, r6
 170 00b0 1720     		movs	r0, #23
 171 00b2 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 172              	.LVL5:
 518:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 173              		.loc 1 518 3 view .LVU47
 174 00b6 1720     		movs	r0, #23
 175 00b8 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 176              	.LVL6:
 519:Core/Src/main.c **** 
 520:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 521:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 522:Core/Src/main.c **** }
 177              		.loc 1 522 1 is_stmt 0 view .LVU48
 178 00bc 0BB0     		add	sp, sp, #44
 179              		.cfi_def_cfa_offset 20
 180              		@ sp needed
 181 00be F0BD     		pop	{r4, r5, r6, r7, pc}
 182              	.L4:
 183              		.align	2
 184              	.L3:
 185 00c0 00380240 		.word	1073887232
 186 00c4 00080240 		.word	1073874944
 187 00c8 00040240 		.word	1073873920
 188              		.cfi_endproc
 189              	.LFE229:
 191              		.section	.text.MX_DMA_Init,"ax",%progbits
 192              		.align	1
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 197              	MX_DMA_Init:
 198              	.LFB228:
 468:Core/Src/main.c **** 
 199              		.loc 1 468 1 is_stmt 1 view -0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 8
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203 0000 00B5     		push	{lr}
 204              		.cfi_def_cfa_offset 4
 205              		.cfi_offset 14, -4
 206 0002 83B0     		sub	sp, sp, #12
 207              		.cfi_def_cfa_offset 16
 471:Core/Src/main.c **** 
 208              		.loc 1 471 3 view .LVU50
 209              	.LBB8:
 471:Core/Src/main.c **** 
 210              		.loc 1 471 3 view .LVU51
 211 0004 0021     		movs	r1, #0
 212 0006 0191     		str	r1, [sp, #4]
 471:Core/Src/main.c **** 
 213              		.loc 1 471 3 view .LVU52
 214 0008 094B     		ldr	r3, .L7
 215 000a 1A6B     		ldr	r2, [r3, #48]
 216 000c 42F48002 		orr	r2, r2, #4194304
 217 0010 1A63     		str	r2, [r3, #48]
 471:Core/Src/main.c **** 
ARM GAS  /tmp/ccw28lnx.s 			page 14


 218              		.loc 1 471 3 view .LVU53
 219 0012 1B6B     		ldr	r3, [r3, #48]
 220 0014 03F48003 		and	r3, r3, #4194304
 221 0018 0193     		str	r3, [sp, #4]
 471:Core/Src/main.c **** 
 222              		.loc 1 471 3 view .LVU54
 223 001a 019B     		ldr	r3, [sp, #4]
 224              	.LBE8:
 471:Core/Src/main.c **** 
 225              		.loc 1 471 3 view .LVU55
 475:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 226              		.loc 1 475 3 view .LVU56
 227 001c 0A46     		mov	r2, r1
 228 001e 3820     		movs	r0, #56
 229 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 230              	.LVL7:
 476:Core/Src/main.c **** 
 231              		.loc 1 476 3 view .LVU57
 232 0024 3820     		movs	r0, #56
 233 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 234              	.LVL8:
 478:Core/Src/main.c **** 
 235              		.loc 1 478 1 is_stmt 0 view .LVU58
 236 002a 03B0     		add	sp, sp, #12
 237              		.cfi_def_cfa_offset 4
 238              		@ sp needed
 239 002c 5DF804FB 		ldr	pc, [sp], #4
 240              	.L8:
 241              		.align	2
 242              	.L7:
 243 0030 00380240 		.word	1073887232
 244              		.cfi_endproc
 245              	.LFE228:
 247              		.section	.text.TIM10_IRQHandler,"ax",%progbits
 248              		.align	1
 249              		.global	TIM10_IRQHandler
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 254              	TIM10_IRQHandler:
 255              	.LFB230:
 523:Core/Src/main.c **** 
 524:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 525:Core/Src/main.c **** void TIM10_IRQHandler(void) {
 256              		.loc 1 525 29 is_stmt 1 view -0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260 0000 08B5     		push	{r3, lr}
 261              		.cfi_def_cfa_offset 8
 262              		.cfi_offset 3, -8
 263              		.cfi_offset 14, -4
 526:Core/Src/main.c ****     HAL_TIM_IRQHandler(&htim10);  // This clears the interrupt flag and calls the callback
 264              		.loc 1 526 5 view .LVU60
 265 0002 0248     		ldr	r0, .L11
 266 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 267              	.LVL9:
ARM GAS  /tmp/ccw28lnx.s 			page 15


 527:Core/Src/main.c **** }
 268              		.loc 1 527 1 is_stmt 0 view .LVU61
 269 0008 08BD     		pop	{r3, pc}
 270              	.L12:
 271 000a 00BF     		.align	2
 272              	.L11:
 273 000c 00000000 		.word	htim10
 274              		.cfi_endproc
 275              	.LFE230:
 277              		.section	.text.Error_Handler,"ax",%progbits
 278              		.align	1
 279              		.global	Error_Handler
 280              		.syntax unified
 281              		.thumb
 282              		.thumb_func
 284              	Error_Handler:
 285              	.LFB231:
 528:Core/Src/main.c **** /* USER CODE END 4 */
 529:Core/Src/main.c **** 
 530:Core/Src/main.c **** /**
 531:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 532:Core/Src/main.c ****   * @retval None
 533:Core/Src/main.c ****   */
 534:Core/Src/main.c **** void Error_Handler(void)
 535:Core/Src/main.c **** {
 286              		.loc 1 535 1 is_stmt 1 view -0
 287              		.cfi_startproc
 288              		@ Volatile: function does not return.
 289              		@ args = 0, pretend = 0, frame = 0
 290              		@ frame_needed = 0, uses_anonymous_args = 0
 291              		@ link register save eliminated.
 536:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 537:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 538:Core/Src/main.c ****   __disable_irq();
 292              		.loc 1 538 3 view .LVU63
 293              	.LBB9:
 294              	.LBI9:
 295              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
ARM GAS  /tmp/ccw28lnx.s 			page 16


  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
ARM GAS  /tmp/ccw28lnx.s 			page 17


  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
ARM GAS  /tmp/ccw28lnx.s 			page 18


 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
ARM GAS  /tmp/ccw28lnx.s 			page 19


 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
ARM GAS  /tmp/ccw28lnx.s 			page 20


 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccw28lnx.s 			page 21


 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
ARM GAS  /tmp/ccw28lnx.s 			page 22


 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
ARM GAS  /tmp/ccw28lnx.s 			page 23


 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccw28lnx.s 			page 24


 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
ARM GAS  /tmp/ccw28lnx.s 			page 25


 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
ARM GAS  /tmp/ccw28lnx.s 			page 26


 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccw28lnx.s 			page 27


 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
ARM GAS  /tmp/ccw28lnx.s 			page 28


 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
ARM GAS  /tmp/ccw28lnx.s 			page 29


 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
ARM GAS  /tmp/ccw28lnx.s 			page 30


 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccw28lnx.s 			page 31


 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccw28lnx.s 			page 32


 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 296              		.loc 2 960 27 view .LVU64
 297              	.LBB10:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 298              		.loc 2 962 3 view .LVU65
 299              		.syntax unified
 300              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 301 0000 72B6     		cpsid i
 302              	@ 0 "" 2
 303              		.thumb
 304              		.syntax unified
 305              	.L14:
 306              	.LBE10:
 307              	.LBE9:
 539:Core/Src/main.c ****   while (1)
 308              		.loc 1 539 3 view .LVU66
 540:Core/Src/main.c ****   {
 541:Core/Src/main.c ****   }
 309              		.loc 1 541 3 view .LVU67
 539:Core/Src/main.c ****   while (1)
 310              		.loc 1 539 9 view .LVU68
 311 0002 FEE7     		b	.L14
 312              		.cfi_endproc
 313              	.LFE231:
 315              		.section	.text.MX_TIM4_Init,"ax",%progbits
 316              		.align	1
 317              		.syntax unified
 318              		.thumb
ARM GAS  /tmp/ccw28lnx.s 			page 33


 319              		.thumb_func
 321              	MX_TIM4_Init:
 322              	.LFB225:
 334:Core/Src/main.c **** 
 323              		.loc 1 334 1 view -0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 56
 326              		@ frame_needed = 0, uses_anonymous_args = 0
 327 0000 00B5     		push	{lr}
 328              		.cfi_def_cfa_offset 4
 329              		.cfi_offset 14, -4
 330 0002 8FB0     		sub	sp, sp, #60
 331              		.cfi_def_cfa_offset 64
 340:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 332              		.loc 1 340 3 view .LVU70
 340:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 333              		.loc 1 340 26 is_stmt 0 view .LVU71
 334 0004 0023     		movs	r3, #0
 335 0006 0A93     		str	r3, [sp, #40]
 336 0008 0B93     		str	r3, [sp, #44]
 337 000a 0C93     		str	r3, [sp, #48]
 338 000c 0D93     		str	r3, [sp, #52]
 341:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 339              		.loc 1 341 3 is_stmt 1 view .LVU72
 341:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 340              		.loc 1 341 27 is_stmt 0 view .LVU73
 341 000e 0893     		str	r3, [sp, #32]
 342 0010 0993     		str	r3, [sp, #36]
 342:Core/Src/main.c **** 
 343              		.loc 1 342 3 is_stmt 1 view .LVU74
 342:Core/Src/main.c **** 
 344              		.loc 1 342 22 is_stmt 0 view .LVU75
 345 0012 0193     		str	r3, [sp, #4]
 346 0014 0293     		str	r3, [sp, #8]
 347 0016 0393     		str	r3, [sp, #12]
 348 0018 0493     		str	r3, [sp, #16]
 349 001a 0593     		str	r3, [sp, #20]
 350 001c 0693     		str	r3, [sp, #24]
 351 001e 0793     		str	r3, [sp, #28]
 347:Core/Src/main.c ****   htim4.Init.Prescaler = 160-1;
 352              		.loc 1 347 3 is_stmt 1 view .LVU76
 347:Core/Src/main.c ****   htim4.Init.Prescaler = 160-1;
 353              		.loc 1 347 18 is_stmt 0 view .LVU77
 354 0020 1F48     		ldr	r0, .L27
 355 0022 204A     		ldr	r2, .L27+4
 356 0024 0260     		str	r2, [r0]
 348:Core/Src/main.c ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 357              		.loc 1 348 3 is_stmt 1 view .LVU78
 348:Core/Src/main.c ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 358              		.loc 1 348 24 is_stmt 0 view .LVU79
 359 0026 9F22     		movs	r2, #159
 360 0028 4260     		str	r2, [r0, #4]
 349:Core/Src/main.c ****   htim4.Init.Period = 999;
 361              		.loc 1 349 3 is_stmt 1 view .LVU80
 349:Core/Src/main.c ****   htim4.Init.Period = 999;
 362              		.loc 1 349 26 is_stmt 0 view .LVU81
 363 002a 8360     		str	r3, [r0, #8]
ARM GAS  /tmp/ccw28lnx.s 			page 34


 350:Core/Src/main.c ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 364              		.loc 1 350 3 is_stmt 1 view .LVU82
 350:Core/Src/main.c ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 365              		.loc 1 350 21 is_stmt 0 view .LVU83
 366 002c 40F2E732 		movw	r2, #999
 367 0030 C260     		str	r2, [r0, #12]
 351:Core/Src/main.c ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 368              		.loc 1 351 3 is_stmt 1 view .LVU84
 351:Core/Src/main.c ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 369              		.loc 1 351 28 is_stmt 0 view .LVU85
 370 0032 0361     		str	r3, [r0, #16]
 352:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 371              		.loc 1 352 3 is_stmt 1 view .LVU86
 352:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 372              		.loc 1 352 32 is_stmt 0 view .LVU87
 373 0034 8023     		movs	r3, #128
 374 0036 8361     		str	r3, [r0, #24]
 353:Core/Src/main.c ****   {
 375              		.loc 1 353 3 is_stmt 1 view .LVU88
 353:Core/Src/main.c ****   {
 376              		.loc 1 353 7 is_stmt 0 view .LVU89
 377 0038 FFF7FEFF 		bl	HAL_TIM_Base_Init
 378              	.LVL10:
 353:Core/Src/main.c ****   {
 379              		.loc 1 353 6 discriminator 1 view .LVU90
 380 003c 28BB     		cbnz	r0, .L22
 357:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 381              		.loc 1 357 3 is_stmt 1 view .LVU91
 357:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 382              		.loc 1 357 34 is_stmt 0 view .LVU92
 383 003e 4FF48053 		mov	r3, #4096
 384 0042 0A93     		str	r3, [sp, #40]
 358:Core/Src/main.c ****   {
 385              		.loc 1 358 3 is_stmt 1 view .LVU93
 358:Core/Src/main.c ****   {
 386              		.loc 1 358 7 is_stmt 0 view .LVU94
 387 0044 0AA9     		add	r1, sp, #40
 388 0046 1648     		ldr	r0, .L27
 389 0048 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 390              	.LVL11:
 358:Core/Src/main.c ****   {
 391              		.loc 1 358 6 discriminator 1 view .LVU95
 392 004c F8B9     		cbnz	r0, .L23
 362:Core/Src/main.c ****   {
 393              		.loc 1 362 3 is_stmt 1 view .LVU96
 362:Core/Src/main.c ****   {
 394              		.loc 1 362 7 is_stmt 0 view .LVU97
 395 004e 1448     		ldr	r0, .L27
 396 0050 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 397              	.LVL12:
 362:Core/Src/main.c ****   {
 398              		.loc 1 362 6 discriminator 1 view .LVU98
 399 0054 E8B9     		cbnz	r0, .L24
 366:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 400              		.loc 1 366 3 is_stmt 1 view .LVU99
 366:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 401              		.loc 1 366 37 is_stmt 0 view .LVU100
ARM GAS  /tmp/ccw28lnx.s 			page 35


 402 0056 0023     		movs	r3, #0
 403 0058 0893     		str	r3, [sp, #32]
 367:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 404              		.loc 1 367 3 is_stmt 1 view .LVU101
 367:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 405              		.loc 1 367 33 is_stmt 0 view .LVU102
 406 005a 0993     		str	r3, [sp, #36]
 368:Core/Src/main.c ****   {
 407              		.loc 1 368 3 is_stmt 1 view .LVU103
 368:Core/Src/main.c ****   {
 408              		.loc 1 368 7 is_stmt 0 view .LVU104
 409 005c 08A9     		add	r1, sp, #32
 410 005e 1048     		ldr	r0, .L27
 411 0060 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 412              	.LVL13:
 368:Core/Src/main.c ****   {
 413              		.loc 1 368 6 discriminator 1 view .LVU105
 414 0064 B8B9     		cbnz	r0, .L25
 372:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 415              		.loc 1 372 3 is_stmt 1 view .LVU106
 372:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 416              		.loc 1 372 20 is_stmt 0 view .LVU107
 417 0066 6023     		movs	r3, #96
 418 0068 0193     		str	r3, [sp, #4]
 373:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 419              		.loc 1 373 3 is_stmt 1 view .LVU108
 373:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 420              		.loc 1 373 19 is_stmt 0 view .LVU109
 421 006a 0023     		movs	r3, #0
 422 006c 0293     		str	r3, [sp, #8]
 374:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 423              		.loc 1 374 3 is_stmt 1 view .LVU110
 374:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 424              		.loc 1 374 24 is_stmt 0 view .LVU111
 425 006e 0393     		str	r3, [sp, #12]
 375:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 426              		.loc 1 375 3 is_stmt 1 view .LVU112
 375:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 427              		.loc 1 375 24 is_stmt 0 view .LVU113
 428 0070 0593     		str	r3, [sp, #20]
 376:Core/Src/main.c ****   {
 429              		.loc 1 376 3 is_stmt 1 view .LVU114
 376:Core/Src/main.c ****   {
 430              		.loc 1 376 7 is_stmt 0 view .LVU115
 431 0072 0C22     		movs	r2, #12
 432 0074 01A9     		add	r1, sp, #4
 433 0076 0A48     		ldr	r0, .L27
 434 0078 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 435              	.LVL14:
 376:Core/Src/main.c ****   {
 436              		.loc 1 376 6 discriminator 1 view .LVU116
 437 007c 68B9     		cbnz	r0, .L26
 383:Core/Src/main.c **** 
 438              		.loc 1 383 3 is_stmt 1 view .LVU117
 439 007e 0848     		ldr	r0, .L27
 440 0080 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 441              	.LVL15:
ARM GAS  /tmp/ccw28lnx.s 			page 36


 385:Core/Src/main.c **** 
 442              		.loc 1 385 1 is_stmt 0 view .LVU118
 443 0084 0FB0     		add	sp, sp, #60
 444              		.cfi_remember_state
 445              		.cfi_def_cfa_offset 4
 446              		@ sp needed
 447 0086 5DF804FB 		ldr	pc, [sp], #4
 448              	.L22:
 449              		.cfi_restore_state
 355:Core/Src/main.c ****   }
 450              		.loc 1 355 5 is_stmt 1 view .LVU119
 451 008a FFF7FEFF 		bl	Error_Handler
 452              	.LVL16:
 453              	.L23:
 360:Core/Src/main.c ****   }
 454              		.loc 1 360 5 view .LVU120
 455 008e FFF7FEFF 		bl	Error_Handler
 456              	.LVL17:
 457              	.L24:
 364:Core/Src/main.c ****   }
 458              		.loc 1 364 5 view .LVU121
 459 0092 FFF7FEFF 		bl	Error_Handler
 460              	.LVL18:
 461              	.L25:
 370:Core/Src/main.c ****   }
 462              		.loc 1 370 5 view .LVU122
 463 0096 FFF7FEFF 		bl	Error_Handler
 464              	.LVL19:
 465              	.L26:
 378:Core/Src/main.c ****   }
 466              		.loc 1 378 5 view .LVU123
 467 009a FFF7FEFF 		bl	Error_Handler
 468              	.LVL20:
 469              	.L28:
 470 009e 00BF     		.align	2
 471              	.L27:
 472 00a0 00000000 		.word	htim4
 473 00a4 00080040 		.word	1073743872
 474              		.cfi_endproc
 475              	.LFE225:
 477              		.section	.text.MX_I2C1_Init,"ax",%progbits
 478              		.align	1
 479              		.syntax unified
 480              		.thumb
 481              		.thumb_func
 483              	MX_I2C1_Init:
 484              	.LFB223:
 251:Core/Src/main.c **** 
 485              		.loc 1 251 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489 0000 08B5     		push	{r3, lr}
 490              		.cfi_def_cfa_offset 8
 491              		.cfi_offset 3, -8
 492              		.cfi_offset 14, -4
 260:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
ARM GAS  /tmp/ccw28lnx.s 			page 37


 493              		.loc 1 260 3 view .LVU125
 260:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 494              		.loc 1 260 18 is_stmt 0 view .LVU126
 495 0002 0A48     		ldr	r0, .L33
 496 0004 0A4B     		ldr	r3, .L33+4
 497 0006 0360     		str	r3, [r0]
 261:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 498              		.loc 1 261 3 is_stmt 1 view .LVU127
 261:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 499              		.loc 1 261 25 is_stmt 0 view .LVU128
 500 0008 0A4B     		ldr	r3, .L33+8
 501 000a 4360     		str	r3, [r0, #4]
 262:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 502              		.loc 1 262 3 is_stmt 1 view .LVU129
 262:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 503              		.loc 1 262 24 is_stmt 0 view .LVU130
 504 000c 0023     		movs	r3, #0
 505 000e 8360     		str	r3, [r0, #8]
 263:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 506              		.loc 1 263 3 is_stmt 1 view .LVU131
 263:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 507              		.loc 1 263 26 is_stmt 0 view .LVU132
 508 0010 C360     		str	r3, [r0, #12]
 264:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 509              		.loc 1 264 3 is_stmt 1 view .LVU133
 264:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 510              		.loc 1 264 29 is_stmt 0 view .LVU134
 511 0012 4FF48042 		mov	r2, #16384
 512 0016 0261     		str	r2, [r0, #16]
 265:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 513              		.loc 1 265 3 is_stmt 1 view .LVU135
 265:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 514              		.loc 1 265 30 is_stmt 0 view .LVU136
 515 0018 4361     		str	r3, [r0, #20]
 266:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 516              		.loc 1 266 3 is_stmt 1 view .LVU137
 266:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 517              		.loc 1 266 26 is_stmt 0 view .LVU138
 518 001a 8361     		str	r3, [r0, #24]
 267:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 519              		.loc 1 267 3 is_stmt 1 view .LVU139
 267:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 520              		.loc 1 267 30 is_stmt 0 view .LVU140
 521 001c C361     		str	r3, [r0, #28]
 268:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 522              		.loc 1 268 3 is_stmt 1 view .LVU141
 268:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 523              		.loc 1 268 28 is_stmt 0 view .LVU142
 524 001e 0362     		str	r3, [r0, #32]
 269:Core/Src/main.c ****   {
 525              		.loc 1 269 3 is_stmt 1 view .LVU143
 269:Core/Src/main.c ****   {
 526              		.loc 1 269 7 is_stmt 0 view .LVU144
 527 0020 FFF7FEFF 		bl	HAL_I2C_Init
 528              	.LVL21:
 269:Core/Src/main.c ****   {
 529              		.loc 1 269 6 discriminator 1 view .LVU145
ARM GAS  /tmp/ccw28lnx.s 			page 38


 530 0024 00B9     		cbnz	r0, .L32
 277:Core/Src/main.c **** 
 531              		.loc 1 277 1 view .LVU146
 532 0026 08BD     		pop	{r3, pc}
 533              	.L32:
 271:Core/Src/main.c ****   }
 534              		.loc 1 271 5 is_stmt 1 view .LVU147
 535 0028 FFF7FEFF 		bl	Error_Handler
 536              	.LVL22:
 537              	.L34:
 538              		.align	2
 539              	.L33:
 540 002c 00000000 		.word	hi2c1
 541 0030 00540040 		.word	1073763328
 542 0034 A0860100 		.word	100000
 543              		.cfi_endproc
 544              	.LFE223:
 546              		.section	.text.MX_ADC1_Init,"ax",%progbits
 547              		.align	1
 548              		.syntax unified
 549              		.thumb
 550              		.thumb_func
 552              	MX_ADC1_Init:
 553              	.LFB222:
 190:Core/Src/main.c **** 
 554              		.loc 1 190 1 view -0
 555              		.cfi_startproc
 556              		@ args = 0, pretend = 0, frame = 16
 557              		@ frame_needed = 0, uses_anonymous_args = 0
 558 0000 00B5     		push	{lr}
 559              		.cfi_def_cfa_offset 4
 560              		.cfi_offset 14, -4
 561 0002 85B0     		sub	sp, sp, #20
 562              		.cfi_def_cfa_offset 24
 196:Core/Src/main.c **** 
 563              		.loc 1 196 3 view .LVU149
 196:Core/Src/main.c **** 
 564              		.loc 1 196 26 is_stmt 0 view .LVU150
 565 0004 0023     		movs	r3, #0
 566 0006 0093     		str	r3, [sp]
 567 0008 0193     		str	r3, [sp, #4]
 568 000a 0293     		str	r3, [sp, #8]
 569 000c 0393     		str	r3, [sp, #12]
 204:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 570              		.loc 1 204 3 is_stmt 1 view .LVU151
 204:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 571              		.loc 1 204 18 is_stmt 0 view .LVU152
 572 000e 1A48     		ldr	r0, .L43
 573 0010 1A4A     		ldr	r2, .L43+4
 574 0012 0260     		str	r2, [r0]
 205:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 575              		.loc 1 205 3 is_stmt 1 view .LVU153
 205:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 576              		.loc 1 205 29 is_stmt 0 view .LVU154
 577 0014 4FF44032 		mov	r2, #196608
 578 0018 4260     		str	r2, [r0, #4]
 206:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
ARM GAS  /tmp/ccw28lnx.s 			page 39


 579              		.loc 1 206 3 is_stmt 1 view .LVU155
 206:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 580              		.loc 1 206 25 is_stmt 0 view .LVU156
 581 001a 8360     		str	r3, [r0, #8]
 207:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 582              		.loc 1 207 3 is_stmt 1 view .LVU157
 207:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 583              		.loc 1 207 27 is_stmt 0 view .LVU158
 584 001c 0122     		movs	r2, #1
 585 001e 0261     		str	r2, [r0, #16]
 208:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 586              		.loc 1 208 3 is_stmt 1 view .LVU159
 208:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 587              		.loc 1 208 33 is_stmt 0 view .LVU160
 588 0020 0276     		strb	r2, [r0, #24]
 209:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 589              		.loc 1 209 3 is_stmt 1 view .LVU161
 209:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 590              		.loc 1 209 36 is_stmt 0 view .LVU162
 591 0022 80F82030 		strb	r3, [r0, #32]
 210:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 592              		.loc 1 210 3 is_stmt 1 view .LVU163
 210:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 593              		.loc 1 210 35 is_stmt 0 view .LVU164
 594 0026 C362     		str	r3, [r0, #44]
 211:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 595              		.loc 1 211 3 is_stmt 1 view .LVU165
 211:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 596              		.loc 1 211 31 is_stmt 0 view .LVU166
 597 0028 1549     		ldr	r1, .L43+8
 598 002a 8162     		str	r1, [r0, #40]
 212:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 2;
 599              		.loc 1 212 3 is_stmt 1 view .LVU167
 212:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 2;
 600              		.loc 1 212 24 is_stmt 0 view .LVU168
 601 002c C360     		str	r3, [r0, #12]
 213:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 602              		.loc 1 213 3 is_stmt 1 view .LVU169
 213:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 603              		.loc 1 213 30 is_stmt 0 view .LVU170
 604 002e 0223     		movs	r3, #2
 605 0030 C361     		str	r3, [r0, #28]
 214:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 606              		.loc 1 214 3 is_stmt 1 view .LVU171
 214:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 607              		.loc 1 214 36 is_stmt 0 view .LVU172
 608 0032 80F83020 		strb	r2, [r0, #48]
 215:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 609              		.loc 1 215 3 is_stmt 1 view .LVU173
 215:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 610              		.loc 1 215 27 is_stmt 0 view .LVU174
 611 0036 4261     		str	r2, [r0, #20]
 216:Core/Src/main.c ****   {
 612              		.loc 1 216 3 is_stmt 1 view .LVU175
 216:Core/Src/main.c ****   {
 613              		.loc 1 216 7 is_stmt 0 view .LVU176
 614 0038 FFF7FEFF 		bl	HAL_ADC_Init
ARM GAS  /tmp/ccw28lnx.s 			page 40


 615              	.LVL23:
 216:Core/Src/main.c ****   {
 616              		.loc 1 216 6 discriminator 1 view .LVU177
 617 003c B0B9     		cbnz	r0, .L40
 223:Core/Src/main.c ****   sConfig.Rank = 1;
 618              		.loc 1 223 3 is_stmt 1 view .LVU178
 223:Core/Src/main.c ****   sConfig.Rank = 1;
 619              		.loc 1 223 19 is_stmt 0 view .LVU179
 620 003e 0023     		movs	r3, #0
 621 0040 0093     		str	r3, [sp]
 224:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 622              		.loc 1 224 3 is_stmt 1 view .LVU180
 224:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 623              		.loc 1 224 16 is_stmt 0 view .LVU181
 624 0042 0123     		movs	r3, #1
 625 0044 0193     		str	r3, [sp, #4]
 225:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 626              		.loc 1 225 3 is_stmt 1 view .LVU182
 225:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 627              		.loc 1 225 24 is_stmt 0 view .LVU183
 628 0046 0723     		movs	r3, #7
 629 0048 0293     		str	r3, [sp, #8]
 226:Core/Src/main.c ****   {
 630              		.loc 1 226 3 is_stmt 1 view .LVU184
 226:Core/Src/main.c ****   {
 631              		.loc 1 226 7 is_stmt 0 view .LVU185
 632 004a 6946     		mov	r1, sp
 633 004c 0A48     		ldr	r0, .L43
 634 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 635              	.LVL24:
 226:Core/Src/main.c ****   {
 636              		.loc 1 226 6 discriminator 1 view .LVU186
 637 0052 68B9     		cbnz	r0, .L41
 233:Core/Src/main.c ****   sConfig.Rank = 2;
 638              		.loc 1 233 3 is_stmt 1 view .LVU187
 233:Core/Src/main.c ****   sConfig.Rank = 2;
 639              		.loc 1 233 19 is_stmt 0 view .LVU188
 640 0054 0123     		movs	r3, #1
 641 0056 0093     		str	r3, [sp]
 234:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 642              		.loc 1 234 3 is_stmt 1 view .LVU189
 234:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 643              		.loc 1 234 16 is_stmt 0 view .LVU190
 644 0058 0223     		movs	r3, #2
 645 005a 0193     		str	r3, [sp, #4]
 235:Core/Src/main.c ****   {
 646              		.loc 1 235 3 is_stmt 1 view .LVU191
 235:Core/Src/main.c ****   {
 647              		.loc 1 235 7 is_stmt 0 view .LVU192
 648 005c 6946     		mov	r1, sp
 649 005e 0648     		ldr	r0, .L43
 650 0060 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 651              	.LVL25:
 235:Core/Src/main.c ****   {
 652              		.loc 1 235 6 discriminator 1 view .LVU193
 653 0064 30B9     		cbnz	r0, .L42
 243:Core/Src/main.c **** 
ARM GAS  /tmp/ccw28lnx.s 			page 41


 654              		.loc 1 243 1 view .LVU194
 655 0066 05B0     		add	sp, sp, #20
 656              		.cfi_remember_state
 657              		.cfi_def_cfa_offset 4
 658              		@ sp needed
 659 0068 5DF804FB 		ldr	pc, [sp], #4
 660              	.L40:
 661              		.cfi_restore_state
 218:Core/Src/main.c ****   }
 662              		.loc 1 218 5 is_stmt 1 view .LVU195
 663 006c FFF7FEFF 		bl	Error_Handler
 664              	.LVL26:
 665              	.L41:
 228:Core/Src/main.c ****   }
 666              		.loc 1 228 5 view .LVU196
 667 0070 FFF7FEFF 		bl	Error_Handler
 668              	.LVL27:
 669              	.L42:
 237:Core/Src/main.c ****   }
 670              		.loc 1 237 5 view .LVU197
 671 0074 FFF7FEFF 		bl	Error_Handler
 672              	.LVL28:
 673              	.L44:
 674              		.align	2
 675              	.L43:
 676 0078 00000000 		.word	hadc1
 677 007c 00200140 		.word	1073815552
 678 0080 0100000F 		.word	251658241
 679              		.cfi_endproc
 680              	.LFE222:
 682              		.section	.text.MX_TIM2_Init,"ax",%progbits
 683              		.align	1
 684              		.syntax unified
 685              		.thumb
 686              		.thumb_func
 688              	MX_TIM2_Init:
 689              	.LFB224:
 285:Core/Src/main.c **** 
 690              		.loc 1 285 1 view -0
 691              		.cfi_startproc
 692              		@ args = 0, pretend = 0, frame = 48
 693              		@ frame_needed = 0, uses_anonymous_args = 0
 694 0000 10B5     		push	{r4, lr}
 695              		.cfi_def_cfa_offset 8
 696              		.cfi_offset 4, -8
 697              		.cfi_offset 14, -4
 698 0002 8CB0     		sub	sp, sp, #48
 699              		.cfi_def_cfa_offset 56
 291:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 700              		.loc 1 291 3 view .LVU199
 291:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 701              		.loc 1 291 27 is_stmt 0 view .LVU200
 702 0004 03AC     		add	r4, sp, #12
 703 0006 2422     		movs	r2, #36
 704 0008 0021     		movs	r1, #0
 705 000a 2046     		mov	r0, r4
 706 000c FFF7FEFF 		bl	memset
ARM GAS  /tmp/ccw28lnx.s 			page 42


 707              	.LVL29:
 292:Core/Src/main.c **** 
 708              		.loc 1 292 3 is_stmt 1 view .LVU201
 292:Core/Src/main.c **** 
 709              		.loc 1 292 27 is_stmt 0 view .LVU202
 710 0010 0023     		movs	r3, #0
 711 0012 0193     		str	r3, [sp, #4]
 712 0014 0293     		str	r3, [sp, #8]
 297:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
 713              		.loc 1 297 3 is_stmt 1 view .LVU203
 297:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
 714              		.loc 1 297 18 is_stmt 0 view .LVU204
 715 0016 1048     		ldr	r0, .L51
 716 0018 4FF08042 		mov	r2, #1073741824
 717 001c 0260     		str	r2, [r0]
 298:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 718              		.loc 1 298 3 is_stmt 1 view .LVU205
 298:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 719              		.loc 1 298 24 is_stmt 0 view .LVU206
 720 001e 4360     		str	r3, [r0, #4]
 299:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 721              		.loc 1 299 3 is_stmt 1 view .LVU207
 299:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 722              		.loc 1 299 26 is_stmt 0 view .LVU208
 723 0020 8360     		str	r3, [r0, #8]
 300:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 724              		.loc 1 300 3 is_stmt 1 view .LVU209
 300:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 725              		.loc 1 300 21 is_stmt 0 view .LVU210
 726 0022 4FF0FF32 		mov	r2, #-1
 727 0026 C260     		str	r2, [r0, #12]
 301:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 728              		.loc 1 301 3 is_stmt 1 view .LVU211
 301:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 729              		.loc 1 301 28 is_stmt 0 view .LVU212
 730 0028 0361     		str	r3, [r0, #16]
 302:Core/Src/main.c ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 731              		.loc 1 302 3 is_stmt 1 view .LVU213
 302:Core/Src/main.c ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 732              		.loc 1 302 32 is_stmt 0 view .LVU214
 733 002a 8361     		str	r3, [r0, #24]
 303:Core/Src/main.c ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 734              		.loc 1 303 3 is_stmt 1 view .LVU215
 303:Core/Src/main.c ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 735              		.loc 1 303 23 is_stmt 0 view .LVU216
 736 002c 0123     		movs	r3, #1
 737 002e 0393     		str	r3, [sp, #12]
 304:Core/Src/main.c ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 738              		.loc 1 304 3 is_stmt 1 view .LVU217
 305:Core/Src/main.c ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 739              		.loc 1 305 3 view .LVU218
 305:Core/Src/main.c ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 740              		.loc 1 305 24 is_stmt 0 view .LVU219
 741 0030 0593     		str	r3, [sp, #20]
 306:Core/Src/main.c ****   sConfig.IC1Filter = 0;
 742              		.loc 1 306 3 is_stmt 1 view .LVU220
 307:Core/Src/main.c ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
ARM GAS  /tmp/ccw28lnx.s 			page 43


 743              		.loc 1 307 3 view .LVU221
 308:Core/Src/main.c ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 744              		.loc 1 308 3 view .LVU222
 309:Core/Src/main.c ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 745              		.loc 1 309 3 view .LVU223
 309:Core/Src/main.c ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 746              		.loc 1 309 24 is_stmt 0 view .LVU224
 747 0032 0993     		str	r3, [sp, #36]
 310:Core/Src/main.c ****   sConfig.IC2Filter = 0;
 748              		.loc 1 310 3 is_stmt 1 view .LVU225
 311:Core/Src/main.c ****   if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 749              		.loc 1 311 3 view .LVU226
 312:Core/Src/main.c ****   {
 750              		.loc 1 312 3 view .LVU227
 312:Core/Src/main.c ****   {
 751              		.loc 1 312 7 is_stmt 0 view .LVU228
 752 0034 2146     		mov	r1, r4
 753 0036 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 754              	.LVL30:
 312:Core/Src/main.c ****   {
 755              		.loc 1 312 6 discriminator 1 view .LVU229
 756 003a 48B9     		cbnz	r0, .L49
 316:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 757              		.loc 1 316 3 is_stmt 1 view .LVU230
 316:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 758              		.loc 1 316 37 is_stmt 0 view .LVU231
 759 003c 0023     		movs	r3, #0
 760 003e 0193     		str	r3, [sp, #4]
 317:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 761              		.loc 1 317 3 is_stmt 1 view .LVU232
 317:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 762              		.loc 1 317 33 is_stmt 0 view .LVU233
 763 0040 0293     		str	r3, [sp, #8]
 318:Core/Src/main.c ****   {
 764              		.loc 1 318 3 is_stmt 1 view .LVU234
 318:Core/Src/main.c ****   {
 765              		.loc 1 318 7 is_stmt 0 view .LVU235
 766 0042 01A9     		add	r1, sp, #4
 767 0044 0448     		ldr	r0, .L51
 768 0046 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 769              	.LVL31:
 318:Core/Src/main.c ****   {
 770              		.loc 1 318 6 discriminator 1 view .LVU236
 771 004a 18B9     		cbnz	r0, .L50
 326:Core/Src/main.c **** 
 772              		.loc 1 326 1 view .LVU237
 773 004c 0CB0     		add	sp, sp, #48
 774              		.cfi_remember_state
 775              		.cfi_def_cfa_offset 8
 776              		@ sp needed
 777 004e 10BD     		pop	{r4, pc}
 778              	.L49:
 779              		.cfi_restore_state
 314:Core/Src/main.c ****   }
 780              		.loc 1 314 5 is_stmt 1 view .LVU238
 781 0050 FFF7FEFF 		bl	Error_Handler
 782              	.LVL32:
ARM GAS  /tmp/ccw28lnx.s 			page 44


 783              	.L50:
 320:Core/Src/main.c ****   }
 784              		.loc 1 320 5 view .LVU239
 785 0054 FFF7FEFF 		bl	Error_Handler
 786              	.LVL33:
 787              	.L52:
 788              		.align	2
 789              	.L51:
 790 0058 00000000 		.word	htim2
 791              		.cfi_endproc
 792              	.LFE224:
 794              		.section	.text.MX_TIM10_Init,"ax",%progbits
 795              		.align	1
 796              		.syntax unified
 797              		.thumb
 798              		.thumb_func
 800              	MX_TIM10_Init:
 801              	.LFB226:
 393:Core/Src/main.c **** 
 802              		.loc 1 393 1 view -0
 803              		.cfi_startproc
 804              		@ args = 0, pretend = 0, frame = 32
 805              		@ frame_needed = 0, uses_anonymous_args = 0
 806 0000 00B5     		push	{lr}
 807              		.cfi_def_cfa_offset 4
 808              		.cfi_offset 14, -4
 809 0002 89B0     		sub	sp, sp, #36
 810              		.cfi_def_cfa_offset 40
 399:Core/Src/main.c **** 
 811              		.loc 1 399 3 view .LVU241
 399:Core/Src/main.c **** 
 812              		.loc 1 399 22 is_stmt 0 view .LVU242
 813 0004 0023     		movs	r3, #0
 814 0006 0193     		str	r3, [sp, #4]
 815 0008 0293     		str	r3, [sp, #8]
 816 000a 0393     		str	r3, [sp, #12]
 817 000c 0493     		str	r3, [sp, #16]
 818 000e 0593     		str	r3, [sp, #20]
 819 0010 0693     		str	r3, [sp, #24]
 820 0012 0793     		str	r3, [sp, #28]
 404:Core/Src/main.c ****   htim10.Init.Prescaler = 0;
 821              		.loc 1 404 3 is_stmt 1 view .LVU243
 404:Core/Src/main.c ****   htim10.Init.Prescaler = 0;
 822              		.loc 1 404 19 is_stmt 0 view .LVU244
 823 0014 1448     		ldr	r0, .L61
 824 0016 154A     		ldr	r2, .L61+4
 825 0018 0260     		str	r2, [r0]
 405:Core/Src/main.c ****   htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 826              		.loc 1 405 3 is_stmt 1 view .LVU245
 405:Core/Src/main.c ****   htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 827              		.loc 1 405 25 is_stmt 0 view .LVU246
 828 001a 4360     		str	r3, [r0, #4]
 406:Core/Src/main.c ****   htim10.Init.Period = 65535;
 829              		.loc 1 406 3 is_stmt 1 view .LVU247
 406:Core/Src/main.c ****   htim10.Init.Period = 65535;
 830              		.loc 1 406 27 is_stmt 0 view .LVU248
 831 001c 8360     		str	r3, [r0, #8]
ARM GAS  /tmp/ccw28lnx.s 			page 45


 407:Core/Src/main.c ****   htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 832              		.loc 1 407 3 is_stmt 1 view .LVU249
 407:Core/Src/main.c ****   htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 833              		.loc 1 407 22 is_stmt 0 view .LVU250
 834 001e 4FF6FF72 		movw	r2, #65535
 835 0022 C260     		str	r2, [r0, #12]
 408:Core/Src/main.c ****   htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 836              		.loc 1 408 3 is_stmt 1 view .LVU251
 408:Core/Src/main.c ****   htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 837              		.loc 1 408 29 is_stmt 0 view .LVU252
 838 0024 0361     		str	r3, [r0, #16]
 409:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 839              		.loc 1 409 3 is_stmt 1 view .LVU253
 409:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 840              		.loc 1 409 33 is_stmt 0 view .LVU254
 841 0026 8023     		movs	r3, #128
 842 0028 8361     		str	r3, [r0, #24]
 410:Core/Src/main.c ****   {
 843              		.loc 1 410 3 is_stmt 1 view .LVU255
 410:Core/Src/main.c ****   {
 844              		.loc 1 410 7 is_stmt 0 view .LVU256
 845 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 846              	.LVL34:
 410:Core/Src/main.c ****   {
 847              		.loc 1 410 6 discriminator 1 view .LVU257
 848 002e A0B9     		cbnz	r0, .L58
 414:Core/Src/main.c ****   {
 849              		.loc 1 414 3 is_stmt 1 view .LVU258
 414:Core/Src/main.c ****   {
 850              		.loc 1 414 7 is_stmt 0 view .LVU259
 851 0030 0D48     		ldr	r0, .L61
 852 0032 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 853              	.LVL35:
 414:Core/Src/main.c ****   {
 854              		.loc 1 414 6 discriminator 1 view .LVU260
 855 0036 90B9     		cbnz	r0, .L59
 418:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 856              		.loc 1 418 3 is_stmt 1 view .LVU261
 418:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 857              		.loc 1 418 20 is_stmt 0 view .LVU262
 858 0038 6023     		movs	r3, #96
 859 003a 0193     		str	r3, [sp, #4]
 419:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 860              		.loc 1 419 3 is_stmt 1 view .LVU263
 419:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 861              		.loc 1 419 19 is_stmt 0 view .LVU264
 862 003c 0022     		movs	r2, #0
 863 003e 0292     		str	r2, [sp, #8]
 420:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 864              		.loc 1 420 3 is_stmt 1 view .LVU265
 420:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 865              		.loc 1 420 24 is_stmt 0 view .LVU266
 866 0040 0392     		str	r2, [sp, #12]
 421:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 867              		.loc 1 421 3 is_stmt 1 view .LVU267
 421:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 868              		.loc 1 421 24 is_stmt 0 view .LVU268
ARM GAS  /tmp/ccw28lnx.s 			page 46


 869 0042 0592     		str	r2, [sp, #20]
 422:Core/Src/main.c ****   {
 870              		.loc 1 422 3 is_stmt 1 view .LVU269
 422:Core/Src/main.c ****   {
 871              		.loc 1 422 7 is_stmt 0 view .LVU270
 872 0044 01A9     		add	r1, sp, #4
 873 0046 0848     		ldr	r0, .L61
 874 0048 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 875              	.LVL36:
 422:Core/Src/main.c ****   {
 876              		.loc 1 422 6 discriminator 1 view .LVU271
 877 004c 48B9     		cbnz	r0, .L60
 429:Core/Src/main.c **** 
 878              		.loc 1 429 3 is_stmt 1 view .LVU272
 879 004e 0648     		ldr	r0, .L61
 880 0050 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 881              	.LVL37:
 431:Core/Src/main.c **** 
 882              		.loc 1 431 1 is_stmt 0 view .LVU273
 883 0054 09B0     		add	sp, sp, #36
 884              		.cfi_remember_state
 885              		.cfi_def_cfa_offset 4
 886              		@ sp needed
 887 0056 5DF804FB 		ldr	pc, [sp], #4
 888              	.L58:
 889              		.cfi_restore_state
 412:Core/Src/main.c ****   }
 890              		.loc 1 412 5 is_stmt 1 view .LVU274
 891 005a FFF7FEFF 		bl	Error_Handler
 892              	.LVL38:
 893              	.L59:
 416:Core/Src/main.c ****   }
 894              		.loc 1 416 5 view .LVU275
 895 005e FFF7FEFF 		bl	Error_Handler
 896              	.LVL39:
 897              	.L60:
 424:Core/Src/main.c ****   }
 898              		.loc 1 424 5 view .LVU276
 899 0062 FFF7FEFF 		bl	Error_Handler
 900              	.LVL40:
 901              	.L62:
 902 0066 00BF     		.align	2
 903              	.L61:
 904 0068 00000000 		.word	htim10
 905 006c 00440140 		.word	1073824768
 906              		.cfi_endproc
 907              	.LFE226:
 909              		.section	.text.MX_TIM11_Init,"ax",%progbits
 910              		.align	1
 911              		.syntax unified
 912              		.thumb
 913              		.thumb_func
 915              	MX_TIM11_Init:
 916              	.LFB227:
 439:Core/Src/main.c **** 
 917              		.loc 1 439 1 view -0
 918              		.cfi_startproc
ARM GAS  /tmp/ccw28lnx.s 			page 47


 919              		@ args = 0, pretend = 0, frame = 0
 920              		@ frame_needed = 0, uses_anonymous_args = 0
 921 0000 08B5     		push	{r3, lr}
 922              		.cfi_def_cfa_offset 8
 923              		.cfi_offset 3, -8
 924              		.cfi_offset 14, -4
 448:Core/Src/main.c ****   htim11.Init.Prescaler = 32-1;
 925              		.loc 1 448 3 view .LVU278
 448:Core/Src/main.c ****   htim11.Init.Prescaler = 32-1;
 926              		.loc 1 448 19 is_stmt 0 view .LVU279
 927 0002 0948     		ldr	r0, .L67
 928 0004 094B     		ldr	r3, .L67+4
 929 0006 0360     		str	r3, [r0]
 449:Core/Src/main.c ****   htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 930              		.loc 1 449 3 is_stmt 1 view .LVU280
 449:Core/Src/main.c ****   htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 931              		.loc 1 449 25 is_stmt 0 view .LVU281
 932 0008 1F23     		movs	r3, #31
 933 000a 4360     		str	r3, [r0, #4]
 450:Core/Src/main.c ****   htim11.Init.Period = 65535;
 934              		.loc 1 450 3 is_stmt 1 view .LVU282
 450:Core/Src/main.c ****   htim11.Init.Period = 65535;
 935              		.loc 1 450 27 is_stmt 0 view .LVU283
 936 000c 0023     		movs	r3, #0
 937 000e 8360     		str	r3, [r0, #8]
 451:Core/Src/main.c ****   htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 938              		.loc 1 451 3 is_stmt 1 view .LVU284
 451:Core/Src/main.c ****   htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 939              		.loc 1 451 22 is_stmt 0 view .LVU285
 940 0010 4FF6FF72 		movw	r2, #65535
 941 0014 C260     		str	r2, [r0, #12]
 452:Core/Src/main.c ****   htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 942              		.loc 1 452 3 is_stmt 1 view .LVU286
 452:Core/Src/main.c ****   htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 943              		.loc 1 452 29 is_stmt 0 view .LVU287
 944 0016 0361     		str	r3, [r0, #16]
 453:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 945              		.loc 1 453 3 is_stmt 1 view .LVU288
 453:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 946              		.loc 1 453 33 is_stmt 0 view .LVU289
 947 0018 8023     		movs	r3, #128
 948 001a 8361     		str	r3, [r0, #24]
 454:Core/Src/main.c ****   {
 949              		.loc 1 454 3 is_stmt 1 view .LVU290
 454:Core/Src/main.c ****   {
 950              		.loc 1 454 7 is_stmt 0 view .LVU291
 951 001c FFF7FEFF 		bl	HAL_TIM_Base_Init
 952              	.LVL41:
 454:Core/Src/main.c ****   {
 953              		.loc 1 454 6 discriminator 1 view .LVU292
 954 0020 00B9     		cbnz	r0, .L66
 462:Core/Src/main.c **** 
 955              		.loc 1 462 1 view .LVU293
 956 0022 08BD     		pop	{r3, pc}
 957              	.L66:
 456:Core/Src/main.c ****   }
 958              		.loc 1 456 5 is_stmt 1 view .LVU294
ARM GAS  /tmp/ccw28lnx.s 			page 48


 959 0024 FFF7FEFF 		bl	Error_Handler
 960              	.LVL42:
 961              	.L68:
 962              		.align	2
 963              	.L67:
 964 0028 00000000 		.word	htim11
 965 002c 00480140 		.word	1073825792
 966              		.cfi_endproc
 967              	.LFE227:
 969              		.section	.text.SystemClock_Config,"ax",%progbits
 970              		.align	1
 971              		.global	SystemClock_Config
 972              		.syntax unified
 973              		.thumb
 974              		.thumb_func
 976              	SystemClock_Config:
 977              	.LFB221:
 140:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 978              		.loc 1 140 1 view -0
 979              		.cfi_startproc
 980              		@ args = 0, pretend = 0, frame = 80
 981              		@ frame_needed = 0, uses_anonymous_args = 0
 982 0000 10B5     		push	{r4, lr}
 983              		.cfi_def_cfa_offset 8
 984              		.cfi_offset 4, -8
 985              		.cfi_offset 14, -4
 986 0002 94B0     		sub	sp, sp, #80
 987              		.cfi_def_cfa_offset 88
 141:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 988              		.loc 1 141 3 view .LVU296
 141:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 989              		.loc 1 141 22 is_stmt 0 view .LVU297
 990 0004 08AC     		add	r4, sp, #32
 991 0006 3022     		movs	r2, #48
 992 0008 0021     		movs	r1, #0
 993 000a 2046     		mov	r0, r4
 994 000c FFF7FEFF 		bl	memset
 995              	.LVL43:
 142:Core/Src/main.c **** 
 996              		.loc 1 142 3 is_stmt 1 view .LVU298
 142:Core/Src/main.c **** 
 997              		.loc 1 142 22 is_stmt 0 view .LVU299
 998 0010 0023     		movs	r3, #0
 999 0012 0393     		str	r3, [sp, #12]
 1000 0014 0493     		str	r3, [sp, #16]
 1001 0016 0593     		str	r3, [sp, #20]
 1002 0018 0693     		str	r3, [sp, #24]
 1003 001a 0793     		str	r3, [sp, #28]
 146:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 1004              		.loc 1 146 3 is_stmt 1 view .LVU300
 1005              	.LBB11:
 146:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 1006              		.loc 1 146 3 view .LVU301
 1007 001c 0193     		str	r3, [sp, #4]
 146:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 1008              		.loc 1 146 3 view .LVU302
 1009 001e 214A     		ldr	r2, .L75
ARM GAS  /tmp/ccw28lnx.s 			page 49


 1010 0020 116C     		ldr	r1, [r2, #64]
 1011 0022 41F08051 		orr	r1, r1, #268435456
 1012 0026 1164     		str	r1, [r2, #64]
 146:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 1013              		.loc 1 146 3 view .LVU303
 1014 0028 126C     		ldr	r2, [r2, #64]
 1015 002a 02F08052 		and	r2, r2, #268435456
 1016 002e 0192     		str	r2, [sp, #4]
 146:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 1017              		.loc 1 146 3 view .LVU304
 1018 0030 019A     		ldr	r2, [sp, #4]
 1019              	.LBE11:
 146:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 1020              		.loc 1 146 3 view .LVU305
 147:Core/Src/main.c **** 
 1021              		.loc 1 147 3 view .LVU306
 1022              	.LBB12:
 147:Core/Src/main.c **** 
 1023              		.loc 1 147 3 view .LVU307
 1024 0032 0293     		str	r3, [sp, #8]
 147:Core/Src/main.c **** 
 1025              		.loc 1 147 3 view .LVU308
 1026 0034 1C4A     		ldr	r2, .L75+4
 1027 0036 1368     		ldr	r3, [r2]
 1028 0038 23F44043 		bic	r3, r3, #49152
 1029 003c 43F40043 		orr	r3, r3, #32768
 1030 0040 1360     		str	r3, [r2]
 147:Core/Src/main.c **** 
 1031              		.loc 1 147 3 view .LVU309
 1032 0042 1368     		ldr	r3, [r2]
 1033 0044 03F44043 		and	r3, r3, #49152
 1034 0048 0293     		str	r3, [sp, #8]
 147:Core/Src/main.c **** 
 1035              		.loc 1 147 3 view .LVU310
 1036 004a 029B     		ldr	r3, [sp, #8]
 1037              	.LBE12:
 147:Core/Src/main.c **** 
 1038              		.loc 1 147 3 view .LVU311
 152:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1039              		.loc 1 152 3 view .LVU312
 152:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1040              		.loc 1 152 36 is_stmt 0 view .LVU313
 1041 004c 0123     		movs	r3, #1
 1042 004e 0893     		str	r3, [sp, #32]
 153:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1043              		.loc 1 153 3 is_stmt 1 view .LVU314
 153:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1044              		.loc 1 153 30 is_stmt 0 view .LVU315
 1045 0050 4FF48033 		mov	r3, #65536
 1046 0054 0993     		str	r3, [sp, #36]
 154:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1047              		.loc 1 154 3 is_stmt 1 view .LVU316
 154:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1048              		.loc 1 154 34 is_stmt 0 view .LVU317
 1049 0056 0223     		movs	r3, #2
 1050 0058 0E93     		str	r3, [sp, #56]
 155:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 25;
ARM GAS  /tmp/ccw28lnx.s 			page 50


 1051              		.loc 1 155 3 is_stmt 1 view .LVU318
 155:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 25;
 1052              		.loc 1 155 35 is_stmt 0 view .LVU319
 1053 005a 4FF48002 		mov	r2, #4194304
 1054 005e 0F92     		str	r2, [sp, #60]
 156:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 160;
 1055              		.loc 1 156 3 is_stmt 1 view .LVU320
 156:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 160;
 1056              		.loc 1 156 30 is_stmt 0 view .LVU321
 1057 0060 1922     		movs	r2, #25
 1058 0062 1092     		str	r2, [sp, #64]
 157:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1059              		.loc 1 157 3 is_stmt 1 view .LVU322
 157:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1060              		.loc 1 157 30 is_stmt 0 view .LVU323
 1061 0064 A022     		movs	r2, #160
 1062 0066 1192     		str	r2, [sp, #68]
 158:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1063              		.loc 1 158 3 is_stmt 1 view .LVU324
 158:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1064              		.loc 1 158 30 is_stmt 0 view .LVU325
 1065 0068 1293     		str	r3, [sp, #72]
 159:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1066              		.loc 1 159 3 is_stmt 1 view .LVU326
 159:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1067              		.loc 1 159 30 is_stmt 0 view .LVU327
 1068 006a 0423     		movs	r3, #4
 1069 006c 1393     		str	r3, [sp, #76]
 160:Core/Src/main.c ****   {
 1070              		.loc 1 160 3 is_stmt 1 view .LVU328
 160:Core/Src/main.c ****   {
 1071              		.loc 1 160 7 is_stmt 0 view .LVU329
 1072 006e 2046     		mov	r0, r4
 1073 0070 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1074              	.LVL44:
 160:Core/Src/main.c ****   {
 1075              		.loc 1 160 6 discriminator 1 view .LVU330
 1076 0074 88B9     		cbnz	r0, .L73
 167:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1077              		.loc 1 167 3 is_stmt 1 view .LVU331
 167:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1078              		.loc 1 167 31 is_stmt 0 view .LVU332
 1079 0076 0F23     		movs	r3, #15
 1080 0078 0393     		str	r3, [sp, #12]
 169:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1081              		.loc 1 169 3 is_stmt 1 view .LVU333
 169:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1082              		.loc 1 169 34 is_stmt 0 view .LVU334
 1083 007a 0221     		movs	r1, #2
 1084 007c 0491     		str	r1, [sp, #16]
 170:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1085              		.loc 1 170 3 is_stmt 1 view .LVU335
 170:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1086              		.loc 1 170 35 is_stmt 0 view .LVU336
 1087 007e 0023     		movs	r3, #0
 1088 0080 0593     		str	r3, [sp, #20]
 171:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
ARM GAS  /tmp/ccw28lnx.s 			page 51


 1089              		.loc 1 171 3 is_stmt 1 view .LVU337
 171:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1090              		.loc 1 171 36 is_stmt 0 view .LVU338
 1091 0082 4FF48052 		mov	r2, #4096
 1092 0086 0692     		str	r2, [sp, #24]
 172:Core/Src/main.c **** 
 1093              		.loc 1 172 3 is_stmt 1 view .LVU339
 172:Core/Src/main.c **** 
 1094              		.loc 1 172 36 is_stmt 0 view .LVU340
 1095 0088 0793     		str	r3, [sp, #28]
 174:Core/Src/main.c ****   {
 1096              		.loc 1 174 3 is_stmt 1 view .LVU341
 174:Core/Src/main.c ****   {
 1097              		.loc 1 174 7 is_stmt 0 view .LVU342
 1098 008a 03A8     		add	r0, sp, #12
 1099 008c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1100              	.LVL45:
 174:Core/Src/main.c ****   {
 1101              		.loc 1 174 6 discriminator 1 view .LVU343
 1102 0090 28B9     		cbnz	r0, .L74
 181:Core/Src/main.c **** }
 1103              		.loc 1 181 3 is_stmt 1 view .LVU344
 1104 0092 FFF7FEFF 		bl	HAL_RCC_EnableCSS
 1105              	.LVL46:
 182:Core/Src/main.c **** 
 1106              		.loc 1 182 1 is_stmt 0 view .LVU345
 1107 0096 14B0     		add	sp, sp, #80
 1108              		.cfi_remember_state
 1109              		.cfi_def_cfa_offset 8
 1110              		@ sp needed
 1111 0098 10BD     		pop	{r4, pc}
 1112              	.L73:
 1113              		.cfi_restore_state
 162:Core/Src/main.c ****   }
 1114              		.loc 1 162 5 is_stmt 1 view .LVU346
 1115 009a FFF7FEFF 		bl	Error_Handler
 1116              	.LVL47:
 1117              	.L74:
 176:Core/Src/main.c ****   }
 1118              		.loc 1 176 5 view .LVU347
 1119 009e FFF7FEFF 		bl	Error_Handler
 1120              	.LVL48:
 1121              	.L76:
 1122 00a2 00BF     		.align	2
 1123              	.L75:
 1124 00a4 00380240 		.word	1073887232
 1125 00a8 00700040 		.word	1073770496
 1126              		.cfi_endproc
 1127              	.LFE221:
 1129              		.section	.text.main,"ax",%progbits
 1130              		.align	1
 1131              		.global	main
 1132              		.syntax unified
 1133              		.thumb
 1134              		.thumb_func
 1136              	main:
 1137              	.LFB220:
ARM GAS  /tmp/ccw28lnx.s 			page 52


  81:Core/Src/main.c **** 
 1138              		.loc 1 81 1 view -0
 1139              		.cfi_startproc
 1140              		@ Volatile: function does not return.
 1141              		@ args = 0, pretend = 0, frame = 0
 1142              		@ frame_needed = 0, uses_anonymous_args = 0
 1143 0000 08B5     		push	{r3, lr}
 1144              		.cfi_def_cfa_offset 8
 1145              		.cfi_offset 3, -8
 1146              		.cfi_offset 14, -4
  90:Core/Src/main.c **** 
 1147              		.loc 1 90 3 view .LVU349
 1148 0002 FFF7FEFF 		bl	HAL_Init
 1149              	.LVL49:
  97:Core/Src/main.c **** 
 1150              		.loc 1 97 3 view .LVU350
 1151 0006 FFF7FEFF 		bl	SystemClock_Config
 1152              	.LVL50:
 104:Core/Src/main.c ****   MX_DMA_Init();
 1153              		.loc 1 104 3 view .LVU351
 1154 000a FFF7FEFF 		bl	MX_GPIO_Init
 1155              	.LVL51:
 105:Core/Src/main.c ****   MX_TIM4_Init();
 1156              		.loc 1 105 3 view .LVU352
 1157 000e FFF7FEFF 		bl	MX_DMA_Init
 1158              	.LVL52:
 106:Core/Src/main.c ****   MX_I2C1_Init();
 1159              		.loc 1 106 3 view .LVU353
 1160 0012 FFF7FEFF 		bl	MX_TIM4_Init
 1161              	.LVL53:
 107:Core/Src/main.c ****   MX_ADC1_Init();
 1162              		.loc 1 107 3 view .LVU354
 1163 0016 FFF7FEFF 		bl	MX_I2C1_Init
 1164              	.LVL54:
 108:Core/Src/main.c ****   MX_TIM2_Init();
 1165              		.loc 1 108 3 view .LVU355
 1166 001a FFF7FEFF 		bl	MX_ADC1_Init
 1167              	.LVL55:
 109:Core/Src/main.c ****   MX_TIM10_Init();
 1168              		.loc 1 109 3 view .LVU356
 1169 001e FFF7FEFF 		bl	MX_TIM2_Init
 1170              	.LVL56:
 110:Core/Src/main.c ****   MX_TIM11_Init();
 1171              		.loc 1 110 3 view .LVU357
 1172 0022 FFF7FEFF 		bl	MX_TIM10_Init
 1173              	.LVL57:
 111:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1174              		.loc 1 111 3 view .LVU358
 1175 0026 FFF7FEFF 		bl	MX_TIM11_Init
 1176              	.LVL58:
 125:Core/Src/main.c ****   while (1)
 1177              		.loc 1 125 3 view .LVU359
 1178 002a FFF7FEFF 		bl	welder
 1179              	.LVL59:
 1180              	.L78:
 126:Core/Src/main.c ****   {
 1181              		.loc 1 126 3 view .LVU360
ARM GAS  /tmp/ccw28lnx.s 			page 53


 131:Core/Src/main.c ****   /* USER CODE END 3 */
 1182              		.loc 1 131 3 view .LVU361
 126:Core/Src/main.c ****   {
 1183              		.loc 1 126 9 view .LVU362
 1184 002e FEE7     		b	.L78
 1185              		.cfi_endproc
 1186              	.LFE220:
 1188              		.global	htim11
 1189              		.section	.bss.htim11,"aw",%nobits
 1190              		.align	2
 1193              	htim11:
 1194 0000 00000000 		.space	72
 1194      00000000 
 1194      00000000 
 1194      00000000 
 1194      00000000 
 1195              		.global	htim10
 1196              		.section	.bss.htim10,"aw",%nobits
 1197              		.align	2
 1200              	htim10:
 1201 0000 00000000 		.space	72
 1201      00000000 
 1201      00000000 
 1201      00000000 
 1201      00000000 
 1202              		.global	htim4
 1203              		.section	.bss.htim4,"aw",%nobits
 1204              		.align	2
 1207              	htim4:
 1208 0000 00000000 		.space	72
 1208      00000000 
 1208      00000000 
 1208      00000000 
 1208      00000000 
 1209              		.global	htim2
 1210              		.section	.bss.htim2,"aw",%nobits
 1211              		.align	2
 1214              	htim2:
 1215 0000 00000000 		.space	72
 1215      00000000 
 1215      00000000 
 1215      00000000 
 1215      00000000 
 1216              		.global	hi2c1
 1217              		.section	.bss.hi2c1,"aw",%nobits
 1218              		.align	2
 1221              	hi2c1:
 1222 0000 00000000 		.space	84
 1222      00000000 
 1222      00000000 
 1222      00000000 
 1222      00000000 
 1223              		.global	hdma_adc1
 1224              		.section	.bss.hdma_adc1,"aw",%nobits
 1225              		.align	2
 1228              	hdma_adc1:
 1229 0000 00000000 		.space	96
ARM GAS  /tmp/ccw28lnx.s 			page 54


 1229      00000000 
 1229      00000000 
 1229      00000000 
 1229      00000000 
 1230              		.global	hadc1
 1231              		.section	.bss.hadc1,"aw",%nobits
 1232              		.align	2
 1235              	hadc1:
 1236 0000 00000000 		.space	72
 1236      00000000 
 1236      00000000 
 1236      00000000 
 1236      00000000 
 1237              		.text
 1238              	.Letext0:
 1239              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xc.h"
 1240              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1241              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1242              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1243              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1244              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1245              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1246              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1247              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1248              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1249              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 1250              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1251              		.file 15 "Core/Inc/main.h"
 1252              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1253              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1254              		.file 18 "Core/Inc/welder.h"
 1255              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1256              		.file 20 "<built-in>"
ARM GAS  /tmp/ccw28lnx.s 			page 55


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccw28lnx.s:21     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccw28lnx.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccw28lnx.s:185    .text.MX_GPIO_Init:000000c0 $d
     /tmp/ccw28lnx.s:192    .text.MX_DMA_Init:00000000 $t
     /tmp/ccw28lnx.s:197    .text.MX_DMA_Init:00000000 MX_DMA_Init
     /tmp/ccw28lnx.s:243    .text.MX_DMA_Init:00000030 $d
     /tmp/ccw28lnx.s:248    .text.TIM10_IRQHandler:00000000 $t
     /tmp/ccw28lnx.s:254    .text.TIM10_IRQHandler:00000000 TIM10_IRQHandler
     /tmp/ccw28lnx.s:273    .text.TIM10_IRQHandler:0000000c $d
     /tmp/ccw28lnx.s:1200   .bss.htim10:00000000 htim10
     /tmp/ccw28lnx.s:278    .text.Error_Handler:00000000 $t
     /tmp/ccw28lnx.s:284    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccw28lnx.s:316    .text.MX_TIM4_Init:00000000 $t
     /tmp/ccw28lnx.s:321    .text.MX_TIM4_Init:00000000 MX_TIM4_Init
     /tmp/ccw28lnx.s:472    .text.MX_TIM4_Init:000000a0 $d
     /tmp/ccw28lnx.s:1207   .bss.htim4:00000000 htim4
     /tmp/ccw28lnx.s:478    .text.MX_I2C1_Init:00000000 $t
     /tmp/ccw28lnx.s:483    .text.MX_I2C1_Init:00000000 MX_I2C1_Init
     /tmp/ccw28lnx.s:540    .text.MX_I2C1_Init:0000002c $d
     /tmp/ccw28lnx.s:1221   .bss.hi2c1:00000000 hi2c1
     /tmp/ccw28lnx.s:547    .text.MX_ADC1_Init:00000000 $t
     /tmp/ccw28lnx.s:552    .text.MX_ADC1_Init:00000000 MX_ADC1_Init
     /tmp/ccw28lnx.s:676    .text.MX_ADC1_Init:00000078 $d
     /tmp/ccw28lnx.s:1235   .bss.hadc1:00000000 hadc1
     /tmp/ccw28lnx.s:683    .text.MX_TIM2_Init:00000000 $t
     /tmp/ccw28lnx.s:688    .text.MX_TIM2_Init:00000000 MX_TIM2_Init
     /tmp/ccw28lnx.s:790    .text.MX_TIM2_Init:00000058 $d
     /tmp/ccw28lnx.s:1214   .bss.htim2:00000000 htim2
     /tmp/ccw28lnx.s:795    .text.MX_TIM10_Init:00000000 $t
     /tmp/ccw28lnx.s:800    .text.MX_TIM10_Init:00000000 MX_TIM10_Init
     /tmp/ccw28lnx.s:904    .text.MX_TIM10_Init:00000068 $d
     /tmp/ccw28lnx.s:910    .text.MX_TIM11_Init:00000000 $t
     /tmp/ccw28lnx.s:915    .text.MX_TIM11_Init:00000000 MX_TIM11_Init
     /tmp/ccw28lnx.s:964    .text.MX_TIM11_Init:00000028 $d
     /tmp/ccw28lnx.s:1193   .bss.htim11:00000000 htim11
     /tmp/ccw28lnx.s:970    .text.SystemClock_Config:00000000 $t
     /tmp/ccw28lnx.s:976    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccw28lnx.s:1124   .text.SystemClock_Config:000000a4 $d
     /tmp/ccw28lnx.s:1130   .text.main:00000000 $t
     /tmp/ccw28lnx.s:1136   .text.main:00000000 main
     /tmp/ccw28lnx.s:1190   .bss.htim11:00000000 $d
     /tmp/ccw28lnx.s:1197   .bss.htim10:00000000 $d
     /tmp/ccw28lnx.s:1204   .bss.htim4:00000000 $d
     /tmp/ccw28lnx.s:1211   .bss.htim2:00000000 $d
     /tmp/ccw28lnx.s:1218   .bss.hi2c1:00000000 $d
     /tmp/ccw28lnx.s:1228   .bss.hdma_adc1:00000000 hdma_adc1
     /tmp/ccw28lnx.s:1225   .bss.hdma_adc1:00000000 $d
     /tmp/ccw28lnx.s:1232   .bss.hadc1:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_TIM_IRQHandler
ARM GAS  /tmp/ccw28lnx.s 			page 56


HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_I2C_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
memset
HAL_TIM_Encoder_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_EnableCSS
HAL_Init
welder
